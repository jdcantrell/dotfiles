# vim: set filetype=sh :

#osx with brew
export PATH="/usr/local/bin:/usr/local/sbin:~/.composer/vendor/bin:$PATH"
export PATH="$(brew --prefix homebrew/php/php56)/bin:$PATH"

. $(brew --prefix)/etc/bash_completion

export NVM_DIR="/Users/jcantrell/.nvm/"
. "$(brew --prefix nvm)/nvm.sh"

ss_capture() {
  delay=$1
  delay=${delay:=10}
  i=0

  echo "Capturing a screen shot every $delay seconds."
  mkdir -p ~/Desktop/Capture
  while [ 1 ]; do
    ((i ++))
    echo -en "\rFrame $i"
    vardate=$(date +%d\-%m\-%Y\_%H.%M.%S)
    screencapture -t jpg -x ~/Desktop/Capture/$vardate.jpg
    sleep $delay
  done
}

alias phpunit='php -dzend_extension=/usr/local/opt/php56-xdebug/xdebug.so /usr/local/bin/phpunit'


function tab () {
  local cmd=""
  local cdto="$PWD"
  local args="$@"

  if [ -d "$1" ]; then
    cdto=`cd "$1"; pwd`
    args="${@:2}"
  fi

  if [ -n "$args" ]; then
    cmd="; $args"
  fi

osascript <<EOF
tell application "iTerm2"
  tell current window
    create tab with default profile
    tell current session
      write text "cd \"$cdto\"$cmd"
    end tell
  end tell
end tell
EOF
}

function new_window () {
  local cmd=""
  local cdto="$PWD"
  local args="$@"

  if [ -d "$1" ]; then
    cdto=`cd "$1"; pwd`
    args="${@:2}"
  fi

  if [ -n "$args" ]; then
    cmd="; $args"
  fi

  osascript <<EOF
  tell application "iTerm2"
    set newWindow to (create window with profile "Default")
    tell newWindow
      tell current session
        write text "cd \"$cdto\"$cmd"
      end tell
    end tell
  end tell
EOF
}

alias start-search-web='new_window ~/Work/search-web "./run.sh"; new_window ~/Work/search-web/ "nvm use; npm run build -- --watch"; cd ~/Work/search-web'
alias dev-watch='tab ~/Work "bundle exec guard"'
alias pu='phpunit --configuration tests/phpunit_local.xml'

function watchtest () {
  echo "Watching for changes in ./$1 and ./tests/$1"
  watchmedo shell-command -W -p "*.php" -R -c "phpunit --config tests/phpunit_local.xml tests/$1"
}
function watchsrp () {
  echo "Watching for changes, and running tests in $1/tests"
  watchmedo shell-command -W -p "*.php" -R -c "phpunit --bootstrap tests/general/bootstrap.php $1/tests"
}

#Local dev site functions

#find current directory in our list of sites
function dev-find {
  pwd=$(pwd)

  for link in $(ls ~/.sites)
  do
    if [[ $pwd = $(readlink ~/.sites/$link -q) ]]; then
      echo $link
      break
    fi
  done
}

#if this directory is not already a site create it
#$1 - a name for the site, defaults to current directory name
function dev-mk {
  link=$(dev-find)
  if [[ -z $link ]]; then
    name=${1:-$(basename $(pwd))}
    if [ -f ~/.sites/$name ]; then
      echo 'Exists already.'
    else
      ln -s $(pwd) ~/.sites/$name
    fi
    echo "http://$name.sim.bz"
  else
    echo "http://$link.sim.bz"
  fi
}

#open dev site in ff (and create it first if needed)
function dev-ff {
  firefox $(dev-mk $1)
}

#get xip.io url
function xip {
  ip=$(ifconfig utun0 | grep -Eo 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d ' ' -f2)
  ip=$(ifconfig en0 | grep -Eo 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d ' ' -f2)
  link=$(dev-find)
  echo "http://$link.$ip.xip.io"
}

#use icanhazip.com to get your external ip
function xip-all {
  ip=$(curl icanhazip.com)
  link=$(dev-find)
  echo "http://$link.$ip.xip.io"
}

#open xip.io url in FF
function xip-ff {
  firefox $(xip)
}
