# vim: set filetype=sh :

#osx with brew
export PATH="/usr/local/bin:/usr/local/sbin:~/.composer/vendor/bin:$PATH"
export PATH="$(brew --prefix homebrew/php/php56)/bin:$PATH"
export HOMEBREW_GITHUB_API_TOKEN="wtf-why";

. $(brew --prefix)/etc/bash_completion

export NVM_DIR="/Users/jcantrell/.nvm/"
[ -s "$NVM_DIR/nvm.sh" ] && . $NVM_DIR/nvm.sh --delete-prefix # This loads nvm

alias phpunit='php -dzend_extension=/usr/local/opt/php56-xdebug/xdebug.so /usr/local/bin/phpunit'

alias love="/Applications/love.app/Contents/MacOS/love"

tab () {
  local cmd=""
  local cdto="$PWD"
  local args="$@"

  if [ -d "$1" ]; then
    cdto=`cd "$1"; pwd`
    args="${@:2}"
  fi

  if [ -n "$args" ]; then
    cmd="; $args"
  fi

osascript <<EOF
tell application "iTerm2"
  tell current window
    create tab with default profile
    tell current session
      write text "cd \"$cdto\"$cmd"
    end tell
  end tell
end tell
EOF
}

new_window () {
  local cmd=""
  local cdto="$PWD"
  local args="$@"

  if [ -d "$1" ]; then
    cdto=`cd "$1"; pwd`
    args="${@:2}"
  fi

  if [ -n "$args" ]; then
    cmd="; $args"
  fi

  osascript <<EOF
  tell application "iTerm2"
    set newWindow to (create window with profile "Default")
    tell newWindow
      tell current session
        write text "cd \"$cdto\"$cmd"
      end tell
    end tell
  end tell
EOF
}

alias start-search-web='new_window ~/Work/search-web "./run.sh"; new_window ~/Work/search-web/ "nvm use --delete-prefix; yarn upgrade; yarn run build -- --watch"; cd ~/Work/search-web'
alias dev-watch='tab ~/Work "bundle exec guard"'

watchtest () {
  echo "Watching for changes in ./$1 and ./tests/$1"
  watchmedo shell-command -W -p "*.php" -R -c "phpunit --config tests/phpunit_local.xml tests/$1"
}
watchsrp () {
  echo "Watching for changes, and running tests in $1/tests"
  watchmedo shell-command -W -p "*.php" -R -c "phpunit --bootstrap tests/general/bootstrap.php $1/tests"
}

#Local dev site functions

#find current directory in our list of sites
dev_find() {
  pwd=$(pwd)

  for link in ~/.sites/*
  do
    dir=$(readlink "$link" -q);
    if [ "$pwd" = "$dir" ]; then
      echo "$link"
      break
    fi
  done
}

#if this directory is not already a site create it
#$1 - a name for the site, defaults to current directory name
dev_mk() {
  link=$(dev_find)
  if [ -z "$link" ]; then
    name=${1:-$(basename "$(pwd)")}
    target="$HOME/.sites/$name"
    if [ -f "$target" ]; then
      echo 'Exists already.'
    else
      ln -s "$(pwd)" "$target"
    fi
    echo "http://$name.sim.bz"
  else
    echo "http://$link.sim.bz"
  fi
}

#get xip.io url
xip() {
  ip=$(ifconfig utun0 | grep -Eo 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d ' ' -f2)
  ip=$(ifconfig en0 | grep -Eo 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d ' ' -f2)
  link=$(dev_find)
  echo "http://$link.$ip.xip.io"
}

#use icanhazip.com to get your external ip
xip_all() {
  ip=$(curl icanhazip.com)
  link=$(dev_find)
  echo "http://$link.$ip.xip.io"
}

add_smudge() {
  name=$1
  filename=$2
  find=$3
  replace=$4

  git config filter.$name.smudge "sed -e 's/$find/$replace/'"
  git config filter.$name.clean "sed -e 's/$replace/$find/'"
  touch .git/info/attributes
  echo "$filename filter=$name" >> .git/info/attributes
}


convert_video_to_gif() {
  SCALE=${3:-"600:-1"}
  ffmpeg -y -i "$1" -vf "fps=10,scale=$SCALE:flags=lanczos,palettegen" convert_video_to_gif_palette.png
  ffmpeg -y -i "$1" -i convert_video_to_gif_palette.png -filter_complex "fps=10,scale=$SCALE:flags=lanczos[x];[x][1:v]paletteuse" "$2"
  rm convert_video_to_gif_palette.png
}
